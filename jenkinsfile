pipeline {
    agent {
        docker {
            image 'nikitaks997797/my-jenkins-node:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    tools {
        git 'Git'
        maven 'maven3'
    }
    environment {
        SONARQUBE_SCANNER_HOME = tool 'sonarqube'
        SONAR_TOKEN = credentials('sonarqube-token')
    }
    stages {
        stage('Git Checkout') {
            steps {
                script {
                    git branch: 'master',
                        credentialsId: 'Github_cred',
                        url: 'https://github.com/nikitaks97/Maven_repository.git'
                }
            }
        }
   /*     stage('Run SAST') {
            steps {
                sh 'npx eslint.config.js.'
            }
        } */
        stage('Build Application') {
            steps {
                sh 'mvn clean --no-transfer-progress  -Denforcer.skip=true' 
            }
        }
        stage('Run Tests') {
            steps {
                sh 'mvn test --no-transfer-progress  -Denforcer.skip=true'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh """
                        ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \\
                        -Dsonar.projectKey=jenkins \\
                        -Dsonar.sources=./src \\
                        -Dsonar.exclusions=**/*.java \\
                        -Dsonar.host.url=http://172.17.0.3:9000 \\
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }
        stage('Quality Gate') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    timeout(time: 2, unit: 'MINUTES') {
                        script {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }
                        }
                    }
                }
            }
        }
        stage('Package') {
            steps {
                sh 'mvn package --no-transfer-progress  -Denforcer.skip=true'
            }
        }
    }
    post {
        always {
            echo "Pipeline completed"
        }
    }
}
